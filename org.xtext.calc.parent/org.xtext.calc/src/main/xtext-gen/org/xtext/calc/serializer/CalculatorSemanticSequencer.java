/*
 * generated by Xtext 2.25.0
 */
package org.xtext.calc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.calc.services.CalculatorGrammarAccess;
import org.xtext.calc.webCalc.BinaryExpression;
import org.xtext.calc.webCalc.Calculation;
import org.xtext.calc.webCalc.DeclaredParameter;
import org.xtext.calc.webCalc.Definition;
import org.xtext.calc.webCalc.Evaluation;
import org.xtext.calc.webCalc.FeatureCall;
import org.xtext.calc.webCalc.NumberLiteral;
import org.xtext.calc.webCalc.UnaryExpression;
import org.xtext.calc.webCalc.WebCalcPackage;

@SuppressWarnings("all")
public class CalculatorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CalculatorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WebCalcPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WebCalcPackage.BINARY_EXPRESSION:
				sequence_Addition_Multiplication(context, (BinaryExpression) semanticObject); 
				return; 
			case WebCalcPackage.CALCULATION:
				sequence_Calculation(context, (Calculation) semanticObject); 
				return; 
			case WebCalcPackage.DECLARED_PARAMETER:
				sequence_DeclaredParameter(context, (DeclaredParameter) semanticObject); 
				return; 
			case WebCalcPackage.DEFINITION:
				sequence_Definition(context, (Definition) semanticObject); 
				return; 
			case WebCalcPackage.EVALUATION:
				sequence_Evaluation(context, (Evaluation) semanticObject); 
				return; 
			case WebCalcPackage.FEATURE_CALL:
				sequence_FeatureCall(context, (FeatureCall) semanticObject); 
				return; 
			case WebCalcPackage.NUMBER_LITERAL:
				sequence_NumberLiteral(context, (NumberLiteral) semanticObject); 
				return; 
			case WebCalcPackage.UNARY_EXPRESSION:
				sequence_UnaryExpression(context, (UnaryExpression) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Expression returns BinaryExpression
	 *     Addition returns BinaryExpression
	 *     Addition.BinaryExpression_1_0_0 returns BinaryExpression
	 *     Multiplication returns BinaryExpression
	 *     Multiplication.BinaryExpression_1_0 returns BinaryExpression
	 *     UnaryExpression returns BinaryExpression
	 *     PrimaryExpression returns BinaryExpression
	 *
	 * Constraint:
	 *     (
	 *         (left=Addition_BinaryExpression_1_0_0 (operator='+' | operator='-') right=Multiplication) | 
	 *         (left=Multiplication_BinaryExpression_1_0 (operator='*' | operator='/') right=UnaryExpression)
	 *     )
	 */
	protected void sequence_Addition_Multiplication(ISerializationContext context, BinaryExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Calculation returns Calculation
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_Calculation(ISerializationContext context, Calculation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractDefinition returns DeclaredParameter
	 *     DeclaredParameter returns DeclaredParameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DeclaredParameter(ISerializationContext context, DeclaredParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebCalcPackage.Literals.ABSTRACT_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebCalcPackage.Literals.ABSTRACT_DEFINITION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Definition
	 *     AbstractDefinition returns Definition
	 *     Definition returns Definition
	 *
	 * Constraint:
	 *     (
	 *         (native?='native' name=ID isFunction?='(' (params+=DeclaredParameter params+=DeclaredParameter*)?) | 
	 *         (name=ID (isFunction?='(' (params+=DeclaredParameter params+=DeclaredParameter*)?)? expression=Expression)
	 *     )
	 */
	protected void sequence_Definition(ISerializationContext context, Definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Evaluation
	 *     Evaluation returns Evaluation
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Evaluation(ISerializationContext context, Evaluation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebCalcPackage.Literals.STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebCalcPackage.Literals.STATEMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FeatureCall
	 *     Addition returns FeatureCall
	 *     Addition.BinaryExpression_1_0_0 returns FeatureCall
	 *     Multiplication returns FeatureCall
	 *     Multiplication.BinaryExpression_1_0 returns FeatureCall
	 *     UnaryExpression returns FeatureCall
	 *     PrimaryExpression returns FeatureCall
	 *     FeatureCall returns FeatureCall
	 *
	 * Constraint:
	 *     (feature=[AbstractDefinition|ID] (args+=Expression args+=Expression*)?)
	 */
	protected void sequence_FeatureCall(ISerializationContext context, FeatureCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns NumberLiteral
	 *     Addition returns NumberLiteral
	 *     Addition.BinaryExpression_1_0_0 returns NumberLiteral
	 *     Multiplication returns NumberLiteral
	 *     Multiplication.BinaryExpression_1_0 returns NumberLiteral
	 *     UnaryExpression returns NumberLiteral
	 *     PrimaryExpression returns NumberLiteral
	 *     NumberLiteral returns NumberLiteral
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_NumberLiteral(ISerializationContext context, NumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebCalcPackage.Literals.NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebCalcPackage.Literals.NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns UnaryExpression
	 *     Addition returns UnaryExpression
	 *     Addition.BinaryExpression_1_0_0 returns UnaryExpression
	 *     Multiplication returns UnaryExpression
	 *     Multiplication.BinaryExpression_1_0 returns UnaryExpression
	 *     UnaryExpression returns UnaryExpression
	 *     PrimaryExpression returns UnaryExpression
	 *
	 * Constraint:
	 *     (operator='-' expression=PrimaryExpression)
	 */
	protected void sequence_UnaryExpression(ISerializationContext context, UnaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WebCalcPackage.Literals.UNARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebCalcPackage.Literals.UNARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, WebCalcPackage.Literals.UNARY_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WebCalcPackage.Literals.UNARY_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_0_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
}
