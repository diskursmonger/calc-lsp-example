/*
 * generated by Xtext 2.25.0
 */
grammar InternalCalculator;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.calc.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.calc.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.calc.services.CalculatorGrammarAccess;

}
@parser::members {
	private CalculatorGrammarAccess grammarAccess;

	public void setGrammarAccess(CalculatorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleCalculation
entryRuleCalculation
:
{ before(grammarAccess.getCalculationRule()); }
	 ruleCalculation
{ after(grammarAccess.getCalculationRule()); } 
	 EOF 
;

// Rule Calculation
ruleCalculation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCalculationAccess().getStatementsAssignment()); }
		(rule__Calculation__StatementsAssignment)*
		{ after(grammarAccess.getCalculationAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getAlternatives()); }
		(rule__Definition__Alternatives)
		{ after(grammarAccess.getDefinitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredParameter
entryRuleDeclaredParameter
:
{ before(grammarAccess.getDeclaredParameterRule()); }
	 ruleDeclaredParameter
{ after(grammarAccess.getDeclaredParameterRule()); } 
	 EOF 
;

// Rule DeclaredParameter
ruleDeclaredParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredParameterAccess().getNameAssignment()); }
		(rule__DeclaredParameter__NameAssignment)
		{ after(grammarAccess.getDeclaredParameterAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvaluation
entryRuleEvaluation
:
{ before(grammarAccess.getEvaluationRule()); }
	 ruleEvaluation
{ after(grammarAccess.getEvaluationRule()); } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvaluationAccess().getExpressionAssignment()); }
		(rule__Evaluation__ExpressionAssignment)
		{ after(grammarAccess.getEvaluationAccess().getExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
		ruleAddition
		{ after(grammarAccess.getExpressionAccess().getAdditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeatureCall
entryRuleFeatureCall
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureCallAccess().getGroup()); }
		(rule__FeatureCall__Group__0)
		{ after(grammarAccess.getFeatureCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
		(rule__NumberLiteral__ValueAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0()); }
		ruleDefinition
		{ after(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getEvaluationParserRuleCall_1()); }
		ruleEvaluation
		{ after(grammarAccess.getStatementAccess().getEvaluationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_0()); }
		(rule__Definition__Group_0__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup_1()); }
		(rule__Definition__Group_1__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_0_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_0_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
		(rule__UnaryExpression__Group_0__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
		(rule__PrimaryExpression__Group_0__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralParserRuleCall_1()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
		ruleFeatureCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__0__Impl
	rule__Definition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNativeAssignment_0_0()); }
	(rule__Definition__NativeAssignment_0_0)
	{ after(grammarAccess.getDefinitionAccess().getNativeAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__1__Impl
	rule__Definition__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNameAssignment_0_1()); }
	(rule__Definition__NameAssignment_0_1)
	{ after(grammarAccess.getDefinitionAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__2__Impl
	rule__Definition__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_0_2()); }
	(rule__Definition__IsFunctionAssignment_0_2)
	{ after(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__3__Impl
	rule__Definition__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_0_3()); }
	(rule__Definition__Group_0_3__0)?
	{ after(grammarAccess.getDefinitionAccess().getGroup_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_0_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0_3__0__Impl
	rule__Definition__Group_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_0()); }
	(rule__Definition__ParamsAssignment_0_3_0)
	{ after(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_0_3_1()); }
	(rule__Definition__Group_0_3_1__0)*
	{ after(grammarAccess.getDefinitionAccess().getGroup_0_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_0_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0_3_1__0__Impl
	rule__Definition__Group_0_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommaKeyword_0_3_1_0()); }
	','
	{ after(grammarAccess.getDefinitionAccess().getCommaKeyword_0_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_0_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_0_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_1_1()); }
	(rule__Definition__ParamsAssignment_0_3_1_1)
	{ after(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__0__Impl
	rule__Definition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLetKeyword_1_0()); }
	'let'
	{ after(grammarAccess.getDefinitionAccess().getLetKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__1__Impl
	rule__Definition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getNameAssignment_1_1()); }
	(rule__Definition__NameAssignment_1_1)
	{ after(grammarAccess.getDefinitionAccess().getNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__2__Impl
	rule__Definition__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_1_2()); }
	(rule__Definition__Group_1_2__0)?
	{ after(grammarAccess.getDefinitionAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__3__Impl
	rule__Definition__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getColonKeyword_1_3()); }
	':'
	{ after(grammarAccess.getDefinitionAccess().getColonKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getExpressionAssignment_1_4()); }
	(rule__Definition__ExpressionAssignment_1_4)
	{ after(grammarAccess.getDefinitionAccess().getExpressionAssignment_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2__0__Impl
	rule__Definition__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_1_2_0()); }
	(rule__Definition__IsFunctionAssignment_1_2_0)
	{ after(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2__1__Impl
	rule__Definition__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_1_2_1()); }
	(rule__Definition__Group_1_2_1__0)?
	{ after(grammarAccess.getDefinitionAccess().getGroup_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_2_2()); }
	')'
	{ after(grammarAccess.getDefinitionAccess().getRightParenthesisKeyword_1_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2_1__0__Impl
	rule__Definition__Group_1_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_0()); }
	(rule__Definition__ParamsAssignment_1_2_1_0)
	{ after(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getGroup_1_2_1_1()); }
	(rule__Definition__Group_1_2_1_1__0)*
	{ after(grammarAccess.getDefinitionAccess().getGroup_1_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group_1_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2_1_1__0__Impl
	rule__Definition__Group_1_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommaKeyword_1_2_1_1_0()); }
	','
	{ after(grammarAccess.getDefinitionAccess().getCommaKeyword_1_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group_1_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group_1_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_1_1()); }
	(rule__Definition__ParamsAssignment_1_2_1_1_1)
	{ after(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1_0()); }
	(rule__Addition__Group_1_0__0)
	{ after(grammarAccess.getAdditionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0__0__Impl
	rule__Addition__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getBinaryExpressionLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getBinaryExpressionLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0__1__Impl
	rule__Addition__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_0_1()); }
	(rule__Addition__OperatorAssignment_1_0_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_0_2()); }
	(rule__Addition__RightAssignment_1_0_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getMultiplicationAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getBinaryExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getBinaryExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0_1()); }
	(rule__UnaryExpression__OperatorAssignment_0_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_2()); }
	(rule__UnaryExpression__ExpressionAssignment_0_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__0__Impl
	rule__FeatureCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getFeatureAssignment_0()); }
	(rule__FeatureCall__FeatureAssignment_0)
	{ after(grammarAccess.getFeatureCallAccess().getFeatureAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1()); }
	(rule__FeatureCall__Group_1__0)?
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_0()); }
	(rule__FeatureCall__Group_1_0__0)
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0__0__Impl
	rule__FeatureCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getLeftParenthesisKeyword_1_0_0()); }
	'('
	{ after(grammarAccess.getFeatureCallAccess().getLeftParenthesisKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0__1__Impl
	rule__FeatureCall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_0_1()); }
	(rule__FeatureCall__Group_1_0_1__0)?
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_0_2()); }
	')'
	{ after(grammarAccess.getFeatureCallAccess().getRightParenthesisKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0_1__0__Impl
	rule__FeatureCall__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_0()); }
	(rule__FeatureCall__ArgsAssignment_1_0_1_0)
	{ after(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getGroup_1_0_1_1()); }
	(rule__FeatureCall__Group_1_0_1_1__0)*
	{ after(grammarAccess.getFeatureCallAccess().getGroup_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureCall__Group_1_0_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0_1_1__0__Impl
	rule__FeatureCall__Group_1_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_0_1_1_0()); }
	','
	{ after(grammarAccess.getFeatureCallAccess().getCommaKeyword_1_0_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureCall__Group_1_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Group_1_0_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_1_1()); }
	(rule__FeatureCall__ArgsAssignment_1_0_1_1_1)
	{ after(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_1()); }
	(rule__Number__Group_1__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__0__Impl
	rule__Number__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Calculation__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCalculationAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getCalculationAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NativeAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNativeNativeKeyword_0_0_0()); }
		(
			{ before(grammarAccess.getDefinitionAccess().getNativeNativeKeyword_0_0_0()); }
			'native'
			{ after(grammarAccess.getDefinitionAccess().getNativeNativeKeyword_0_0_0()); }
		)
		{ after(grammarAccess.getDefinitionAccess().getNativeNativeKeyword_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__IsFunctionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_0_2_0()); }
		(
			{ before(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_0_2_0()); }
			'('
			{ after(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_0_2_0()); }
		)
		{ after(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ParamsAssignment_0_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_0_3_0_0()); }
		ruleDeclaredParameter
		{ after(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_0_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ParamsAssignment_0_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_0_3_1_1_0()); }
		ruleDeclaredParameter
		{ after(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_0_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__NameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__IsFunctionAssignment_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_1_2_0_0()); }
		(
			{ before(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_1_2_0_0()); }
			'('
			{ after(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_1_2_0_0()); }
		)
		{ after(grammarAccess.getDefinitionAccess().getIsFunctionLeftParenthesisKeyword_1_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ParamsAssignment_1_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_1_2_1_0_0()); }
		ruleDeclaredParameter
		{ after(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_1_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ParamsAssignment_1_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_1_2_1_1_1_0()); }
		ruleDeclaredParameter
		{ after(grammarAccess.getDefinitionAccess().getParamsDeclaredParameterParserRuleCall_1_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__ExpressionAssignment_1_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_1_4_0()); }
		ruleExpression
		{ after(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_1_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredParameter__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getDeclaredParameterAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__ExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_0()); }
		ruleExpression
		{ after(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_0_1_0()); }
		(rule__Addition__OperatorAlternatives_1_0_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_0_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicationAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperatorAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
			'-'
			{ after(grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_0_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__FeatureAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getFeatureAbstractDefinitionCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFeatureCallAccess().getFeatureAbstractDefinitionIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureCallAccess().getFeatureAbstractDefinitionIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFeatureCallAccess().getFeatureAbstractDefinitionCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgsAssignment_1_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_0_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__ArgsAssignment_1_0_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_0_1_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getFeatureCallAccess().getArgsExpressionParserRuleCall_1_0_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
		ruleNumber
		{ after(grammarAccess.getNumberLiteralAccess().getValueNumberParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
