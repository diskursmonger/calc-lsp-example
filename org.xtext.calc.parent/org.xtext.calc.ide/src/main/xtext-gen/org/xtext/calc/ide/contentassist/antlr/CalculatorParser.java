/*
 * generated by Xtext 2.25.0
 */
package org.xtext.calc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.calc.ide.contentassist.antlr.internal.InternalCalculatorParser;
import org.xtext.calc.services.CalculatorGrammarAccess;

public class CalculatorParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CalculatorGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CalculatorGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getAbstractDefinitionAccess().getAlternatives(), "rule__AbstractDefinition__Alternatives");
			builder.put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_0_1_0(), "rule__Addition__OperatorAlternatives_1_0_1_0");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0(), "rule__Multiplication__OperatorAlternatives_1_1_0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_0(), "rule__Definition__Group_0__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_0_3(), "rule__Definition__Group_0_3__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_0_3_1(), "rule__Definition__Group_0_3_1__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_1_2(), "rule__Definition__Group_1_2__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_1_2_1(), "rule__Definition__Group_1_2_1__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup_1_2_1_1(), "rule__Definition__Group_1_2_1_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1_0(), "rule__Addition__Group_1_0__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup(), "rule__FeatureCall__Group__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_1(), "rule__FeatureCall__Group_1__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_1_0(), "rule__FeatureCall__Group_1_0__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_1_0_1(), "rule__FeatureCall__Group_1_0_1__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_1_0_1_1(), "rule__FeatureCall__Group_1_0_1_1__0");
			builder.put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_1(), "rule__Number__Group_1__0");
			builder.put(grammarAccess.getCalculationAccess().getStatementsAssignment(), "rule__Calculation__StatementsAssignment");
			builder.put(grammarAccess.getDefinitionAccess().getNativeAssignment_0_0(), "rule__Definition__NativeAssignment_0_0");
			builder.put(grammarAccess.getDefinitionAccess().getNameAssignment_0_1(), "rule__Definition__NameAssignment_0_1");
			builder.put(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_0_2(), "rule__Definition__IsFunctionAssignment_0_2");
			builder.put(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_0(), "rule__Definition__ParamsAssignment_0_3_0");
			builder.put(grammarAccess.getDefinitionAccess().getParamsAssignment_0_3_1_1(), "rule__Definition__ParamsAssignment_0_3_1_1");
			builder.put(grammarAccess.getDefinitionAccess().getNameAssignment_1_1(), "rule__Definition__NameAssignment_1_1");
			builder.put(grammarAccess.getDefinitionAccess().getIsFunctionAssignment_1_2_0(), "rule__Definition__IsFunctionAssignment_1_2_0");
			builder.put(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_0(), "rule__Definition__ParamsAssignment_1_2_1_0");
			builder.put(grammarAccess.getDefinitionAccess().getParamsAssignment_1_2_1_1_1(), "rule__Definition__ParamsAssignment_1_2_1_1_1");
			builder.put(grammarAccess.getDefinitionAccess().getExpressionAssignment_1_4(), "rule__Definition__ExpressionAssignment_1_4");
			builder.put(grammarAccess.getDeclaredParameterAccess().getNameAssignment(), "rule__DeclaredParameter__NameAssignment");
			builder.put(grammarAccess.getEvaluationAccess().getExpressionAssignment(), "rule__Evaluation__ExpressionAssignment");
			builder.put(grammarAccess.getAdditionAccess().getOperatorAssignment_1_0_1(), "rule__Addition__OperatorAssignment_1_0_1");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_0_2(), "rule__Addition__RightAssignment_1_0_2");
			builder.put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1(), "rule__Multiplication__OperatorAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2(), "rule__Multiplication__RightAssignment_1_2");
			builder.put(grammarAccess.getUnaryExpressionAccess().getOperatorAssignment_0_1(), "rule__UnaryExpression__OperatorAssignment_0_1");
			builder.put(grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_0_2(), "rule__UnaryExpression__ExpressionAssignment_0_2");
			builder.put(grammarAccess.getFeatureCallAccess().getFeatureAssignment_0(), "rule__FeatureCall__FeatureAssignment_0");
			builder.put(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_0(), "rule__FeatureCall__ArgsAssignment_1_0_1_0");
			builder.put(grammarAccess.getFeatureCallAccess().getArgsAssignment_1_0_1_1_1(), "rule__FeatureCall__ArgsAssignment_1_0_1_1_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CalculatorGrammarAccess grammarAccess;

	@Override
	protected InternalCalculatorParser createParser() {
		InternalCalculatorParser result = new InternalCalculatorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CalculatorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CalculatorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
